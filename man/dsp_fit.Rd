% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmc_samplers.R
\name{dsp_fit}
\alias{dsp_fit}
\title{MCMC Sampler for Dynamic Shrinkage with Changepoint}
\usage{
dsp_fit(
  y,
  cp = FALSE,
  evol_error = "DHS",
  D = 1,
  obsSV = "const",
  useAnom = FALSE,
  nsave = 1000,
  nburn = 1000,
  nskip = 4,
  mcmc_params = list("mu", "omega", "r"),
  computeDIC = TRUE,
  verbose = FALSE,
  cp_thres = 0.4,
  return_full_samples = TRUE
)
}
\arguments{
\item{y}{a numeric vector of the \code{T x 1} vector of time series observations}

\item{cp}{a logical flag (default is FALSE) indicating to determine whether to use threshold shrinkage with changepoints.}

\item{evol_error}{the evolution error distribution; must be one of
'DHS' (dynamic horseshoe prior; default), 'HS' (horseshoe prior), 'BL' (Bayesian lasso), or 'NIG' (normal-inverse-gamma prior)}

\item{D}{integer scalar indicating degree of differencing defaults to 1; implementation is available D = 0, D = 1, or D = 2}

\item{obsSV}{Options for modeling the error variance. It must be one of the following:
\itemize{
\item const: Constant error variance for all time points.
\item SV: Stochastic Volatility model.
\item ASV: Adaptive Stochastic Volatility model.
}}

\item{useAnom}{logical (default FALSE); if TRUE, include an anomaly component in the observation equation
(only for threshold shrinkage with changepoints.)}

\item{nsave}{integer scalar (default = 1000); number of MCMC iterations to record}

\item{nburn}{integer scalar (default = 1000); number of MCMC iterations to discard (burn-in)}

\item{nskip}{integer scalar (default = 4); number of MCMC iterations to skip between saving iterations,
i.e., save every (nskip + 1)th draw}

\item{mcmc_params}{list of character scalars naming parameters for which we store the MCMC output;
must be one or more of:
\itemize{
\item "mu" (conditional mean)
\item "yhat" (posterior predictive distribution)
\item "evol_sigma_t2" (evolution error variance)
\item "obs_sigma_t2" (observation error variance)
\item "dhs_phi" (DHS AR(1) coefficient)
\item "dhs_mean" (DHS AR(1) unconditional mean)
}
defaults to list("mu", "omega", "r")}

\item{computeDIC}{logical; if TRUE (default), compute the deviance information criterion \code{DIC}
and the effective number of parameters \code{p_d}}

\item{verbose}{logical; should R report extra information on progress? Defaults to FALSE}

\item{cp_thres}{Proportion of posterior samples of latent indicator being 1 needed to declare a changepoint; defaults to 0.4}

\item{return_full_samples}{logical; if TRUE (default), return full MCMC samples for desired parameters;
if FALSE, return the posterior mean for desired parameters}
}
\value{
A named list of the \code{nsave} MCMC samples for the parameters named in \code{mcmc_params}
if threshold shrinkage with changepoints is used, also return detected changepoint locations
}
\description{
Run the MCMC for Bayesian trend filtering with a penalty on zeroth (D = 0),
first (D = 1), or second (D = 2) differences of the conditional expectation.
The user has the option to utilize threshold shrinkage to identify changepoints
for D = 1 or 2.
The penalty is determined by the prior on the evolution errors, which include:
\itemize{
\item the dynamic horseshoe prior ('DHS');
\item the static horseshoe prior ('HS');
\item the Bayesian lasso ('BL');
\item the normal stochastic volatility model ('SV');
\item the normal-inverse-gamma prior ('NIG').
}
In each case, the evolution error is a scale mixture of Gaussians.
Note that only 'DHS' works for threshold shrinkage with changepoints.
Sampling is accomplished with a (parameter-expanded) Gibbs sampler,
mostly relying on a dynamic linear model representation.
}
\note{
The data \code{y} may contain NAs, which will be treated with a simple imputation scheme
via an additional Gibbs sampling step. In general, rescaling \code{y} to have unit standard
deviation is recommended to avoid numerical issues.
}
\examples{

# Example 1: Change in mean with stochastic volatility
signal = c(rep(0, 50), rep(10, 50))
noise = rep(1, 100)
noise_var = rep(1, 100)
for (k in 2:100){
  noise_var[k] = exp(0.9*log(noise_var[k-1]) + rnorm(1, 0, 0.5))
  noise[k] = rnorm(1, 0, sqrt(noise_var[k])) }

y = signal + noise
mcmc_output = dsp_fit(y, cp=TRUE, mcmc_params = list('yhat', 'mu', "omega", "r"))
cp = mcmc_output$cp
print(paste0('Changepoint Locations: ', cp))
plot_fitted(y, mu = colMeans(mcmc_output$mu), postY = mcmc_output$yhat, y_true = signal)

# Example 2: Change in mean with Outliers
signal = c(rep(0, 100), rep(5, 100))
y = c(rep(0, 100), rep(5, 100)) + rnorm(200)
y[50] = 10
y[150] = -10

mcmc_output = dsp_fit(y, cp=TRUE, useAnom = TRUE, mcmc_params = list('yhat', 'mu', "omega", "r"))
cp = mcmc_output$cp
plot_fitted(y, mu = colMeans(mcmc_output$mu), postY = mcmc_output$yhat, y_true = signal)

# Example 3: Change in linear trend
signal = c(seq(1, 50), seq(51, 2))
y = c(seq(1, 50), seq(51, 2)) + rnorm(100)

mcmc_output = dsp_fit(y, cp=TRUE, D=2, mcmc_params = list('yhat', 'mu', "omega", "r"))
cp = mcmc_output$cp
plot_fitted(y, mu = colMeans(mcmc_output$mu), postY = mcmc_output$yhat, y_true = signal)


}
